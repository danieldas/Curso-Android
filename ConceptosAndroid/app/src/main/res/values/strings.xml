<resources>
    <string name="app_name">Diseño Android</string>
    <string name="activities_titulo">Activities</string>







    <string name="activities">Este es el bloque más común en la programación para Android. Las actividades pueden asociarse, en términos de programación de aplicaciones de escritorio, a las ventanas o cuadros de diálogos de las diferentes aplicaciones.
        Las Activity son clases donde, mostraremos vistas “Views” para dar lugar a la interfaz del usuario y poder tomar el control de todos los eventos que se generen sobre ella. A cada Activity se le asigna una ventana, donde se dibujará toda la interfaz y todos los elementos necesarios.
        El conjunto de Actividades forma la aplicación global, sin embargo, todas ellas se tratan como elementos independientes y se realizan llamadas de unas a otras, se envían parámetros y reciben respuestas de otras actividades a fin de poder funcionar todas como una única.
    </string>
    <string name="sdk_titulo">SDK</string>
    <string name="sdk">SDK, Software Development Kit, es el conjunto de herramientas de programación (depurador de código, bibliotecas, emuladores del sistema operativo, documentación, ejemplos, etc) que permiten a los usuarios programar aplicaciones para un sistema operativo concreto. En nuestro caso, cuando hablemos de SDK nos referiremos a las herramientas que nos permiten programar y compilar aplicaciones en Java para ser funcionales en Android.
    </string>
    <string name="gradle_titulo">Gradle</string>
    <string name="gradle">Los programas y juegos para Android son cada vez más grandes, complejos y, en muchas ocasiones, contienen varias configuraciones diferentes (con publicidad, ad-free, freemium, lite, full, con motivos navideños, etc). Mantener todos estos proyectos al mismo tiempo suele ser muy complicado, por lo que Google presentó una nueva herramienta integrada en Android Studio, llamada Glade, con la que intentar solucionar todos estos problemas.
        Gradle es un sistema de código abierto que nos permite automatizar la tarea de compilación de nuestras aplicaciones en función a ciertas condiciones. Este sistema implementa un nuevo lenguaje de programación, Groovy, con el que se declara la configuración del proyecto.
    </string>
    <string name="broadcast_titulo">Broadcast Intent Receiver</string>
    <string name="broadcast">El Broadcast Intent Receiver es un componente que se encarga de recibir y reaccionar frente a ciertos mensajes emitidos por el sistema operativo. Aunque por lo general la mayoría de estos mensajes son automáticos, es posible configurar mensajes personales según lo que necesite hacer nuestra aplicación e incluso enviar mensajes a otras aplicaciones para que realicen determinadas tareas.
        Dos ejemplos de mensajes Broadcast Intent Receiver son:
        Activar el GPS.
        Terminar de tomar y guardar una fotografía.
    </string>
    <string name="service_titulo">Service</string>
    <string name="service">Mientras que las actividades tienen periodos de vida limitados (se ejecutan, pero al poco tiempo se desechan). Los servicios están diseñados para mantenerse en ejecución por un largo periodo de tiempo, sin que estos se desechen ni dependan de ninguna actividad para funcionar.
        Dos ejemplos de servicios serían:
        Una función que conecte de forma periódica a un servidor para ver si ha cambiado la información de ellos.
        Un reproductor de música, que permite seguir funcionando en segundo plano, aunque estemos utilizando otras aplicaciones.
        Podemos cerrar sin problemas la Activity que lance un servicio, y este seguirá funcionando sin problemas en segundo plano.
    </string>
    <string name="contentprovider_titulo">Content provider</string>
    <string name="contentprovider">Los Content Providers son capas de abstracción que permiten al desarrollador almacenar datos e información de manera que otras aplicaciones puedan acceder a ella. Estos proveedores de contenidos funcionarían, en cierto como, como una API para acceder a los datos de una aplicación desde otras.
    </string>
    <string name="fragment_titulo">Fragment</string>
    <string name="fragment">Los fragmentos se lanzaron junto a Android 3.0 con el fin de solucionar el problema de las múltiples pantallas y resoluciones y poder desarrollar así aplicaciones multi-pantalla y multi-dispositivo. Gracias a estos fragmentos vamos a poder reutilizar código muy fácilmente para mostrar información en dos resoluciones diferentes, por ejemplo, en smartphones una “vista sencilla” y en tablets una “vista completa y detallada” de una aplicación, por ejemplo, una lista de correos electrónicos.
        Una Activity puede tener varios Fragments de manera que, en un smartphone, por ejemplo, se muestre un fragmento concreto y en una tablet, de mayor tamaño de pantalla, se muestre otro fragmento e incluso dos.
    </string>
    <string name="intent_titulo">Intents</string>
    <string name="intent">Los intentos, o Intents, son una serie de eventos que lanza el sistema operativo constantemente para notificar de diferentes acciones, por ejemplo, la inserción o extracción de una tarjeta micro-sd o cuando el dispositivo se está quedando sin batería.
        Las aplicaciones pueden realizar ciertas acciones con estos intentos, responderlos e incluso crear sus propios Intents para lanzar otras actividades o notificar al usuario de que ha pasado algo (por ejemplo, que se ha acabado de descargar un archivo).
        En resumen, los intentos son objetos de la clase Intent que contienen los datos del mensaje que se quiere transmitir. Generalmente los Intents sirven para controlar los 5 bloques anteriores.
    </string>
    <string name="xml">-android:hint: Texto de sugerencia para mostrar cuando el texto está vacío.\n\n
-android:fontFamily: Nombre de la fuente del texto\n\n
-android:gravity: Especifica cómo alinear el componente por el eje X y / o Y de la vista cuando el componente es más pequeño que su contenedor.\n\n
-android:layout_height: Especifica el alto del componente\n\n
-android:maxLength: Establezca un filtro de entrada para restringir la longitud del texto al número especificado.\n\n
-android:text: Texto a mostrar.\n\n
-android:textColor: Color del texto\n\n
-android:textSize: Tamaño del texto\n\n
-android:layout_width: Especifica el ancho del componente\n\n
-android:orientation: Especifica la orientación del ayout, ya sea Horizaontal o vertical\n\n
-android:elevation: Establece la proyección de sombras y el valor de elevación de una vista\n\n
-android:background: Establece el color de fonde del componente\n\n
-card_view:cardCornerRadius: Establece el radio de la esquina de la tarjeta\n\n
-android:id: Establece un id único para después llamarlo desde el código java\n\n
-android:src: Establece un dibujable como el contenido de esta vista de imagen.</string>
</resources>
